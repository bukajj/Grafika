var circles = [];
var colors = [];
var color;
var circle, square;
var squares = [];
var x, y, size, radius, lineWidth;
var canvas;
var ctx;
var backgroundColor = "white";
var i;
var deltaAngle;
var angle;
var sin, cos;
var myVar;
var startScales = [];
var startAlphas = [];
var scaleParam, alphaParam;


var rand = function(min,max)
{
    return Math.floor(Math.random()*(max-min+1)+min);
}

var angleToRadian = function(angle) {
    return Math.PI/180 * angle;
}

colors.push("#ff33cc");
colors.push("#0066ff");
colors.push("#33cc33");
colors.push("#ffff00");
colors.push("#ff0000");
colors.push("#996600");
colors.push("#660033");
colors.push("#00ffff");
colors.push("#000066");
colors.push("#ccff66");

function updateCanvas()
{
    canvas = document.getElementById( "myCanvas" );
    ctx = canvas.getContext('2d');
    
    ctx.fillStyle = backgroundColor;
    ctx.fillRect( 0, 0, canvas.width, canvas.height );
    
    for(i=0; i<250; i++)
    {
        x = rand(0, canvas.width);
        y = rand(0, canvas.height);
        radius = rand(1,20);
        lineWidth = rand(1,radius/2);
        angle = rand(1,360);
        color = colors[rand(1,9)];
        deltaAngle = rand(-5,5);
        alphaParam = Math.random();
        
        
        circle = new Circle(radius, x, y, lineWidth, angle, color, deltaAngle, alphaParam);
        circles.push(circle);
        startAlphas.push(0);
    }
    
    for (i=0; i<250; i++)
    {
        x = rand(0, canvas.width);
        y = rand(0, canvas.height);
        size = rand(1,50); 
        lineWidth = rand(1,size/4);
        angle = rand(1,360);
        color = colors[rand(1,9)];
        deltaAngle = rand(-20,20);
        scaleParam = Math.random();
        alphaParam = Math.random();

        square = new Square(x, y, size, lineWidth, angle, color, deltaAngle, scaleParam, alphaParam);
        squares.push(square);
        startAlphas.push(0);
        startScales.push(-1);
    }
    myVar = setTimeout( rotateSquare, 40);
}

function Circle(radius, x, y, lineWidth, angle, color, deltaAngle, alphaParam)
{
    this.radius = radius;
    this.x = x;
    this.y = y;
    this.lineWidth = lineWidth;
    this.angle = angle;
    this.color=color;
    this.deltaAngle=deltaAngle;
    this.alphaParam = alphaParam;
    
    this.display = function()
    {
        ctx.strokeStyle=this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, angleToRadian(360));
        ctx.lineWidth = this.lineWidth;
        ctx.stroke();
    }
}

function Square(x, y, size, lineWidth, angle, color, deltaAngle, scaleParam, alphaParam)
{
    this.size = size;
    this.x = x;
    this.y = y;
    this.lineWidth = lineWidth;
    this.angle = angle;
    this.color=color;
    this.deltaAngle=deltaAngle;
    this.scaleParam = scaleParam;
    this.alphaParam = alphaParam;
    
    this.display = function()
    {
        ctx.beginPath();
        ctx.strokeStyle=this.color;
        ctx.lineWidth = this.lineWidth;
        ctx.strokeRect(-this.size/2, -this.size/2, this.size, this.size);
        ctx.stroke();
    }
}

function rotateSquare()
{
    ctx = canvas.getContext('2d');
    ctx.fillStyle = backgroundColor;
    ctx.clearRect( 0, 0, canvas.width, canvas.height );
    
    
    
    for(i=0; i<circles.length; i++)
    {
        circle = circles[i];
        
        if(startAlphas[i]===0)
        {
            if(circle.alphaParam<1.0)
            {
                circle.alphaParam+=0.01;
            }
            else
            {
                startAlphas[i] = 1;
            }
        }
        else
        {
            if(circle.alphaParam>0.0)
            {
                circle.alphaParam-=0.01;
            }
            else
            {
                startAlphas[i] = 0;
            }
        }
        
        circle.angle += circle.deltaAngle;
        sin = Math.sin(angleToRadian(circle.angle));
        cos = Math.cos(angleToRadian(circle.angle));
        
        ctx.save();
        ctx.globalAlpha = circle.alphaParam;
        ctx.transform(cos, sin, -sin, cos, canvas.width/2, canvas.height/2);
        circle.display();
        ctx.restore();
    }
    
    for (i=0; i<squares.length; i++)
    { 
        square = squares[i];
        
        if(startScales[i]===-1)
        {
            if(square.scaleParam<1.0)
            {
                square.scaleParam+=0.01;
            }
            else
            {
                startScales[i] = 1;
            }
        }
        else
        {
            if(square.scaleParam>-1.0)
            {
                square.scaleParam-=0.01;    
            }
            else
            {
                startScales[i] = -1;
            }
        }
        
        if(startAlphas[i+circles.length]===0)
        {
            if(square.alphaParam<1.0)
            {
                square.alphaParam+=0.01;
            }
            else
            {
                startAlphas[i+circles.length] = 1;
            }
        }
        else
        {
            if(square.alphaParam>0.0)
            {
                square.alphaParam-=0.01;
            }
            else
            {
                startAlphas[i+circles.length] = 0;
            }
        }
        
        square.angle += square.deltaAngle;
        sin = Math.sin(angleToRadian(square.angle));
        cos = Math.cos(angleToRadian(square.angle));
        
        ctx.save();
        ctx.globalAlpha = square.alphaParam;
        ctx.transform(cos, sin, -sin, cos, square.x, square.y);
        ctx.scale(square.scaleParam, 1);
        square.display();
        ctx.restore();
    }
    
  
    
    myVar = setTimeout( rotateSquare, 40);
}